var documenterSearchIndex = {"docs":
[{"location":"VERSIONS/#Version-approach-and-history","page":"Versions","title":"Version approach and history","text":"","category":"section"},{"location":"VERSIONS/#Approach","page":"Versions","title":"Approach","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"A version of a Julia package is labeled (tagged) as v\"major.minor.patch\".","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"My intention is to update the patch level whenever I make updates which are not visible to any of the existing examples.","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"New functionality will be introduced in minor level updates. This includes adding new examples, tests and the introduction of new arguments if they default to previous behavior.","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Changes that require updates to some examples bump the major level.","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Updates for new releases of Julia and cmdstan bump the appropriate level.","category":"page"},{"location":"VERSIONS/#Testing","page":"Versions","title":"Testing","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"This version of the package has primarily been tested on Travis and Mac OSX 10.15, Julia 1.3 and cmdstan 2.21.0.","category":"page"},{"location":"VERSIONS/#Versions","page":"Versions","title":"Versions","text":"","category":"section"},{"location":"VERSIONS/#Version-6.0.0","page":"Versions","title":"Version 6.0.0","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"This is a breaking release. Instead of by default returning an MCMCChains.Chains object, Requires.jl is used to:","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Optional include glue code to support Chains through MCMCChains.jl.\nOptional include glue code to support DataFrames through DataFrames.jl.\nOptional include glue code to support Particles through MonteCarloMeasusrements.jl.","category":"page"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"By default stan_sample will return an \"a3d\" and optionally can also return a vector of variable names.","category":"page"},{"location":"VERSIONS/#Version-5.0.2","page":"Versions","title":"Version 5.0.2","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Tracking updates of dependencies.\nMinor docs updates (far from complete!)","category":"page"},{"location":"VERSIONS/#Version-5.0.1","page":"Versions","title":"Version 5.0.1","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Tracking updates of dependencies.","category":"page"},{"location":"VERSIONS/#Version-5.0.0","page":"Versions","title":"Version 5.0.0","text":"","category":"section"},{"location":"VERSIONS/","page":"Versions","title":"Versions","text":"Initial release of Stan.jl based on StanJulia organization packages.\nA key package that will test the new setup is StatisticalRethinking.jl. This likely will drive further fine tuning.\nSee the TODO for outstanding work items.","category":"page"},{"location":"INSTALLATION/#cmdstan-installation","page":"Installation","title":"cmdstan installation","text":"","category":"section"},{"location":"INSTALLATION/#Minimal-requirement","page":"Installation","title":"Minimal requirement","text":"","category":"section"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"Note: Stan.jl refers to this Julia package. Stan's executable C++ program is 'cmdstan'.","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"To install Stan.jl e.g. in the Julia REPL: ] add Stan.","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"To run this version of the Stan.jl package on your local machine, it assumes that cmdstan executable is properly installed.","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"In order for Stan.jl to find the cmdstan you need to set the environment variable JULIA_CMDSTAN_HOME to point to the cmdstan directory, e.g. add","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"export JULIA_CMDSTAN_HOME=/Users/rob/Projects/Stan/cmdstan\nlaunchctl setenv JULIA_CMDSTAN_HOME /Users/rob/Projects/Stan/cmdstan","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"to ~/.bash_profile or add","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"ENV[\"JULIA_CMDSTAN_HOME\"]=\"_your absolute path to cmdstan_\"","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"to ./julia/config/startup.jl. ","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"I typically prefer cmdstan not to include the cmdstan version number in the above path to cmdstan (no update needed when the cmdstan version is updated).","category":"page"},{"location":"INSTALLATION/","page":"Installation","title":"Installation","text":"Currently tested with cmdstan 2.21.0","category":"page"},{"location":"WALKTHROUGH/#A-walk-through-example-(using-StanSample.jl)","page":"Walkthrough","title":"A walk-through example (using StanSample.jl)","text":"","category":"section"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Make StanSample.jl available:","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"using StanSample","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Define a variable 'model' to hold the Stan language model definition:","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"model = \"\ndata { \n  int<lower=0> N; \n  int<lower=0,upper=1> y[N];\n} \nparameters {\n  real<lower=0,upper=1> theta;\n} \nmodel {\n  theta ~ beta(1,1);\n    y ~ bernoulli(theta);\n}\n\";","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Create a SampleModel object:","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"sm = SampleModel(\"bernoulli\", model);","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Above SampleModel() call creates a default model for sampling. See ?SampleModel for details.","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"The observed input data:","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"data = Dict(\"N\" => 10, \"y\" => [0, 1, 0, 1, 0, 0, 0, 0, 0, 1]);","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Run a simulation by calling stan_sample(), passing in the model and data: ","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"rc = stan_sample(sm, data=data);\n\nif success(rc)\n  samples = read_samples(sm);\nend","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Many examples are provided in the 3 Example subdirectories. In the test directory a similar set of examples is included that do not depend on MCMCChains.jl.","category":"page"},{"location":"WALKTHROUGH/","page":"Walkthrough","title":"Walkthrough","text":"Additional examples can be found in StanSample.jl and StatisticalRethinking.jl.","category":"page"},{"location":"INTRO/#A-Julia-interface-to-Stan's-cmdstan-executable","page":"Intro","title":"A Julia interface to Stan's cmdstan executable","text":"","category":"section"},{"location":"INTRO/#Stan.jl","page":"Intro","title":"Stan.jl","text":"","category":"section"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Stan is a system for statistical modeling, data analysis, and prediction. It is extensively used in social, biological, and physical sciences, engineering, and business. The Stan program language and interfaces are documented here.","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"cmdstan is the shell/command line interface to run Stan language programs. ","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Stan.jl wraps cmdstan and captures the samples for further processing.","category":"page"},{"location":"INTRO/#StanJulia-overview","page":"Intro","title":"StanJulia overview","text":"","category":"section"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Stan.jl is part of the StanJulia Github organization set of packages. CmdStan.jl is one of two options in StanJulia to capture draws from a Stan language program. The other option is under development and is illustrated in Stan.jl and StatisticalRethinking.jl.","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"These are not the only options to sample using Stan from Julia. Valid other options are PyCall.jl/PyStan and StanRun.jl.","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"On a very high level, a typical workflow for using CmdStan.jl looks like:","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"using CmdStan\n\n# Define a Stan language program.\nbernoulli = \"...\"\n\n# Prepare for calling cmdstan.\nsm = SampleModel(...)\n\n# Compile and run Stan program, collect draws.\nrc = stan_sample(...)\n\nif rc == 0\n  # Cmdstan summary of result\n  sdf = read_summary(sm)\n\n  # Display the summary as a DataFrame\n  sdf |> display\n\n  # Show the draws\n  samples = read_samples(sm, output_format=:array)\n\nend","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"This workflow creates an array of draws, the default value for the output_format argument in read_samples().","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"If at this point a vector of DataFrames (a DataFrame for each chain) is preferred:","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"df = read_samples(sm; output_format=:dataframes)","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Other options are :dataframe, :dataframes, :mcmcchains and :particles. See","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"?read_samples","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"for more details.","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Version 5 of Stan.jl used :mcmcchains by default but the dependencies of MCMCChains.jl, including access to plotting features, lead to long compile times. In version 6 the default is :array again. In order to use the other options glue code is needed which is handled by Requires.jl.","category":"page"},{"location":"INTRO/#References","page":"Intro","title":"References","text":"","category":"section"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"There is no shortage of good books on Bayesian statistics. A few of my favorites are:","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Bolstad: Introduction to Bayesian statistics\nBolstad: Understanding Computational Bayesian Statistics\nGelman, Hill: Data Analysis using regression and multileve,/hierachical models\nMcElreath: Statistical Rethinking\nGelman, Carlin, and others: Bayesian Data Analysis","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"and a great read (and implementation in DynamicHMC.jl):","category":"page"},{"location":"INTRO/","page":"Intro","title":"Intro","text":"Betancourt: A Conceptual Introduction to Hamiltonian Monte Carlo","category":"page"},{"location":"#Stan-example-programs","page":"Stan example programs","title":"Stan example programs","text":"","category":"section"},{"location":"#Bernoulli","page":"Stan example programs","title":"Bernoulli","text":"","category":"section"},{"location":"","page":"Stan example programs","title":"Stan example programs","text":"","category":"page"},{"location":"#Index","page":"Stan example programs","title":"Index","text":"","category":"section"},{"location":"","page":"Stan example programs","title":"Stan example programs","text":"","category":"page"}]
}
